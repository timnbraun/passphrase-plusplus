#! /usr/bin/env python3

import os.path
import sys

EN_DICT = '/usr/share/hunspell/en_CA.dic'
FR_DICT = '/usr/share/hunspell/fr_CA.dic'
SW_DICT = '/usr/share/hunspell/sw_TZ.dic'

def get_header():
	return '''//
// Generated by process_dict.py
//
'''

def get_dict(dict_name):
	with open(dict_name, 'r') as file:
		return file.readlines(-1)

def clean(s):
	before_space = s.strip().split(maxsplit=1)[0]
	return before_space.split('/', maxsplit=1)[0]

def process(dict_name, cpp_name):
	dict = get_dict(dict_name)
	(lang, ext) = os.path.splitext(os.path.basename(cpp_name))
	with open(cpp_name, 'w') as cpp:
		print(get_header(), file=cpp)
		print('#include <cstddef>\n', file=cpp)
		print('extern const char {}[] = {{'.format(lang), file=cpp )
		written_count = 0
		for word in dict[1:-1]:
			clean_word = clean(word)
			if (len(clean_word) > 2 and len(clean_word) < 12):
				print( '\t\"', clean_word, file=cpp, end='\\0\"\n', sep='' )
				written_count = written_count + 1
		print('\t\"\",', file=cpp)
		print('};\n', file=cpp)
		print('extern const size_t {0}_size = sizeof({0});'.format(lang), file=cpp)
		print('extern const size_t {0}_count = {1};'.format(lang, written_count),
				file=cpp)
	with open(cpp_name.replace('.cpp', '.h', 1), 'w') as header:
		print(get_header(), file=header)
		print('extern const char {0}[];'.format(lang), file=header)
		print('extern const size_t {0}_size;'.format(lang), file=header)
		print('extern const size_t {0}_count;'.format(lang), file=header)

if (len(sys.argv) == 3):
	print(sys.argv[1], "-->", sys.argv[2])
	process(sys.argv[1], sys.argv[2])

else:
	print("usage: process_dict.py /shared/dictionary.dic generated_source/dictionary_dict.cpp")
